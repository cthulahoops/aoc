(add-to-load-path ".")
(use-modules (aoc))
(use-modules (srfi srfi-1))

(define (mix value items)
  (let ((source-position (list-index (lambda (x) (equal? x value)) items)))
    (list-insert (list-delete-ref items source-position) (modulo (+ source-position (cdr value)) 4999) value)))

(define (list-delete-ref items index)
  (append (take items index) (drop items (+ index 1))))

(define (list-insert items index value)
  (append (take items index) (cons value (drop items index))))

(define (grove-coordinates output)
  (let ((output-size (length output))
        (zero-position (list-index (lambda (x) (= x 0)) output)))
    (+ (list-ref output (modulo (+ zero-position 1000) output-size))
       (list-ref output (modulo (+ zero-position 2000) output-size))
       (list-ref output (modulo (+ zero-position 3000) output-size)))
    ))

(define (part1)
  (let* ((input (enumerate (map string->number (read-lines))))
         (mixed (fold mix input input))
         (output (map cdr mixed))
        )
    (grove-coordinates output)))

(define (part2)
  (let* ((input (enumerate (map (lambda (x) (* 811589153 x)) (map string->number (read-lines)))))
         (mixed (apply-n-times 10 (lambda (x) (fold mix x input)) input))
         (output (map cdr mixed))
        )
    (grove-coordinates output)))
